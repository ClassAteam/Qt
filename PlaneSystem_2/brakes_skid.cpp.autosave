#include "algorithms.h"
#include "algorithm"
#include "brakes_skid.h"


bool
otkaz_ots_dav_v1k_levt,
otkaz_ots_dav_v1k_pravt,
PK1,
PK2,
PK5;

double
//previous value
V_svk1_pr,
V_svk2_pr,
//
delta_P_avt,
delta_Ptr,
S_k,
S_ogr1,
S_ogr3,
K1,
K2,
K3;

//Ptp
QVector<bool> brakes_PRAT(6, 0.0);
QVector<double> brakes_Vk(6, 0.0);
QVector<double> brakes_Wk(6, 0.0);
QVector<double> brakes_Wk_p(6, 0.0);
QVector<double> brakes_Wsvk(6, 0.0);
QVector<double> brakes_Wsvk_p(6, 0.0);
QVector<double> brakes_DVk(6, 0.0);
QVector<double> brakes_Vk_p(6, 0.0);
QVector<double> brakes_Vkr(6, 0.0);
QVector<double> brakes_DPt(6, 0.0);
QVector<double> brakes_DPtr(6, 0.0);
QVector<double> brakes_DPavt(6, 0.0);
QVector<double> brakes_Ptr(6, 0.0);
QVector<double> brakes_Pt(6, 0.0);
QVector<double> brakes_DVsvk(2, 0.0); 
QVector<double> brakes_Vsvk(2, 0.0); 
QVector<double> brakes_Vsvk_p(2, 0.0); 

brakes_skid::brakes_skid(QWidget*pwgt)
	: QWidget(pwgt)
{
	K1 = 0.003;
}

void brakes_skid::logic_skid()
{
	delta_Ptr = two_points_to_Y(V_kh, 0, 320, 130, 30);

	for(int i = 0; i <= brakes_Ptr.size(); i++)
	{
		if(i <= 3)
		{
			brakes_Ptr[i] = P_t_lev;
		}
		if(i > 3)
		{
			brakes_Ptr[i] = P_t_prav;
		}
        
		brakes_Vsvk[0] = std::max_element(brakes_Vk[0], brakes_Vk[2]);
		brakes_Vsvk[1] = std::max_element(brakes_Vk[3], brakes_Vk[5]);
		brakes_DVsvk[0] = brakes_Vsvk[0] - brakes_Vsvk_p[0];
		brakes_DVsvk[1] = brakes_Vsvk[1] - brakes_Vsvk_p[1];

	}
    
    int j = 0;
	for(int i = 0; i <= 5; i++)
	{
        if(i > 3)
        {
            j++;
        }
		if(!otkaz_ots_dav_v1k_levt)
		{
			brakes_Pt[0] = 0;
		}
		if(!otkaz_ots_dav_v1k_pravt)
		{
			brakes_Pt[3] = 0;
		}

		if(brakes_DVsvk[j] >= 0.0)
		{
			brakes_Vsvk_p[j] = brakes_Vsvk[j];
		}
		else
		{
			if(abs(brakes_DVsvk[j]) >= 11.0)
			{
				brakes_Vsvk[j] = brakes_Vsvk_p[j] - 11;
			}
		}

		if(brakes_PRAT[i] == true)
		{
			brakes_Pt[i] = brakes_Pt[i] - brakes_DPavt[i];
			brakes_DPavt[i] = 0;
			brakes_Pt[i] = brakes_Ptr[i] - brakes_Pt[i];
		}

		if(abs(brakes_DPt[i]) >= brakes_DPtr[i])
		{
			if(brakes_DPt[i] >= 0)
			{
				brakes_Pt[i] = brakes_Pt[i] + delta_Ptr;
			}
			else
			{
				brakes_Pt[i] = brakes_Pt[i] - delta_Ptr;
			}
		}
		else
		{
			brakes_Pt[i] = brakes_Ptr[i];
		}

		if(brakes_Pt[i] >= 0)
		{
		}
		else
		{
			brakes_Pt[i] = 0;
		}

		if(POSH == true)
		{
			brakes_Vkr[i] =
					brakes_Vk_p[i] - K1 * brakes_Pt[i] - 0.25 * (TICK / 1000);
		}
		else
		{
			brakes_Vkr[i] = V_kh - (K1 * brakes_Pt[i]);
		}

		if(brakes_Vkr[i] <= 0)
		{
			brakes_Vkr[i] = 0;
		}
        
        brakes_DVk[i] = ((brakes_Vkr[i] - brakes_Vk_p[i]) * K2);
        
        brakes_Vk[i] = brakes_Vk_p[i] + brakes_DVk[i];
        
        brakes_Vk_p[i] = brakes_Vk[i];
        brakes_Wk_p[i] = K3 * brakes_Vk[i];
        
        brakes_Wsvk_p[j] = K3 * brakes_Vsvk[j];
	}
}


